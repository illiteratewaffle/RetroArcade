Index: src/client_main/java/GameLogic_Client/TicTacToe/TTTBoardTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package client_main.java.GameLogic_Client.TicTacToe;\n//\n//\n//import static org.junit.jupiter.api.Assertions.*;\n//import org.junit.jupiter.api.BeforeEach;\n//import org.junit.jupiter.api.Test;\n//\n//import client_main.java.GameLogic_Client.ivec2;\n//\n//\n//class TTTBoardTest {\n//    private TTTBoard board;\n//\n//    @BeforeEach\n//    void setUp() {\n//        board = new TTTBoard(3, 3);\n//    }\n//\n//    @Test\n//    void testBoardInitialization() {\n//        int[][] expected = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };\n//        assertArrayEquals(expected, board.getBoard(), \"Board should initialize to all zeros.\");\n//    }\n//\n//    @Test\n//    void testSetPiece() {\n//        board.setPiece(new ivec2(1, 1), 1);\n//        assertEquals(1, board.getPiece(new ivec2(1, 1)), \"Piece should be set correctly.\");\n//    }\n//\n//    @Test\n//    void testCheckWinner_RowWin() {\n//        board.setPiece(new ivec2(0, 0), 1);\n//        board.setPiece(new ivec2(0, 1), 1);\n//        board.setPiece(new ivec2(0, 2), 1);\n//        assertTrue(board.checkWinner(1), \"X should win with a row.\");\n//    }\n//\n//    @Test\n//    void testCheckWinner_ColumnWin() {\n//        board.setPiece(new ivec2(0, 0), 2);\n//        board.setPiece(new ivec2(1, 0), 2);\n//        board.setPiece(new ivec2(2, 0), 2);\n//        assertTrue(board.checkWinner(2), \"O should win with a column.\");\n//    }\n//\n//    @Test\n//    void testCheckWinner_DiagonalWin() {\n//        board.setPiece(new ivec2(0, 0), 1);\n//        board.setPiece(new ivec2(1, 1), 1);\n//        board.setPiece(new ivec2(2, 2), 1);\n//        assertTrue(board.checkWinner(1), \"X should win with a diagonal.\");\n//    }\n//\n//    @Test\n//    void testCheckWinner_NoWin() {\n//        board.setPiece(new ivec2(0, 0), 1);\n//        board.setPiece(new ivec2(1, 1), 2);\n//        board.setPiece(new ivec2(2, 2), 1);\n//        assertFalse(board.checkWinner(1), \"No player should win yet.\");\n//        assertFalse(board.checkWinner(2), \"No player should win yet.\");\n//    }\n//}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/client_main/java/GameLogic_Client/TicTacToe/TTTBoardTest.java b/src/client_main/java/GameLogic_Client/TicTacToe/TTTBoardTest.java
--- a/src/client_main/java/GameLogic_Client/TicTacToe/TTTBoardTest.java	(revision 0320c0eb2b1c4a95f623c4c56562ba4862c50020)
+++ b/src/client_main/java/GameLogic_Client/TicTacToe/TTTBoardTest.java	(date 1743383405389)
@@ -1,63 +1,63 @@
-//package client_main.java.GameLogic_Client.TicTacToe;
-//
-//
-//import static org.junit.jupiter.api.Assertions.*;
-//import org.junit.jupiter.api.BeforeEach;
-//import org.junit.jupiter.api.Test;
-//
-//import client_main.java.GameLogic_Client.ivec2;
-//
-//
-//class TTTBoardTest {
-//    private TTTBoard board;
-//
-//    @BeforeEach
-//    void setUp() {
-//        board = new TTTBoard(3, 3);
-//    }
-//
-//    @Test
-//    void testBoardInitialization() {
-//        int[][] expected = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };
-//        assertArrayEquals(expected, board.getBoard(), "Board should initialize to all zeros.");
-//    }
-//
-//    @Test
-//    void testSetPiece() {
-//        board.setPiece(new ivec2(1, 1), 1);
-//        assertEquals(1, board.getPiece(new ivec2(1, 1)), "Piece should be set correctly.");
-//    }
-//
-//    @Test
-//    void testCheckWinner_RowWin() {
-//        board.setPiece(new ivec2(0, 0), 1);
-//        board.setPiece(new ivec2(0, 1), 1);
-//        board.setPiece(new ivec2(0, 2), 1);
-//        assertTrue(board.checkWinner(1), "X should win with a row.");
-//    }
-//
-//    @Test
-//    void testCheckWinner_ColumnWin() {
-//        board.setPiece(new ivec2(0, 0), 2);
-//        board.setPiece(new ivec2(1, 0), 2);
-//        board.setPiece(new ivec2(2, 0), 2);
-//        assertTrue(board.checkWinner(2), "O should win with a column.");
-//    }
-//
-//    @Test
-//    void testCheckWinner_DiagonalWin() {
-//        board.setPiece(new ivec2(0, 0), 1);
-//        board.setPiece(new ivec2(1, 1), 1);
-//        board.setPiece(new ivec2(2, 2), 1);
-//        assertTrue(board.checkWinner(1), "X should win with a diagonal.");
-//    }
-//
-//    @Test
-//    void testCheckWinner_NoWin() {
-//        board.setPiece(new ivec2(0, 0), 1);
-//        board.setPiece(new ivec2(1, 1), 2);
-//        board.setPiece(new ivec2(2, 2), 1);
-//        assertFalse(board.checkWinner(1), "No player should win yet.");
-//        assertFalse(board.checkWinner(2), "No player should win yet.");
-//    }
-//}
\ No newline at end of file
+package client_main.java.GameLogic_Client.TicTacToe;
+
+
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import client_main.java.GameLogic_Client.ivec2;
+
+
+class TTTBoardTest {
+    private TTTBoard board;
+
+    @BeforeEach
+    void setUp() {
+        board = new TTTBoard(3, 3);
+    }
+
+    @Test
+    void testBoardInitialization() {
+        int[][] expected = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} };
+        assertArrayEquals(expected, board.getBoard(), "Board should initialize to all zeros.");
+    }
+
+    @Test
+    void testSetPiece() {
+        board.setPiece(new ivec2(1, 1), 1);
+        assertEquals(1, board.getPiece(new ivec2(1, 1)), "Piece should be set correctly.");
+    }
+
+    @Test
+    void testCheckWinner_RowWin() {
+        board.setPiece(new ivec2(0, 0), 1);
+        board.setPiece(new ivec2(0, 1), 1);
+        board.setPiece(new ivec2(0, 2), 1);
+        assertTrue(board.checkWinner(1), "X should win with a row.");
+    }
+
+    @Test
+    void testCheckWinner_ColumnWin() {
+        board.setPiece(new ivec2(0, 0), 2);
+        board.setPiece(new ivec2(1, 0), 2);
+        board.setPiece(new ivec2(2, 0), 2);
+        assertTrue(board.checkWinner(2), "O should win with a column.");
+    }
+
+    @Test
+    void testCheckWinner_DiagonalWin() {
+        board.setPiece(new ivec2(0, 0), 1);
+        board.setPiece(new ivec2(1, 1), 1);
+        board.setPiece(new ivec2(2, 2), 1);
+        assertTrue(board.checkWinner(1), "X should win with a diagonal.");
+    }
+
+    @Test
+    void testCheckWinner_NoWin() {
+        board.setPiece(new ivec2(0, 0), 1);
+        board.setPiece(new ivec2(1, 1), 2);
+        board.setPiece(new ivec2(2, 2), 1);
+        assertFalse(board.checkWinner(1), "No player should win yet.");
+        assertFalse(board.checkWinner(2), "No player should win yet.");
+    }
+}
\ No newline at end of file
