Index: src/client_main/java/GUI_client/CheckersGUIController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GUI_client;\r\n\r\nimport GameLogic_Client.Checkers.CheckersController;\r\nimport GameLogic_Client.Ivec2;\r\n\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.StackPane;\r\n\r\nimport javafx.scene.image.ImageView;\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class CheckersGUIController implements Initializable {\r\n\r\n    @FXML\r\n    private GridPane checkerBoard;\r\n\r\n    @FXML\r\n    private ImageView screen;\r\n\r\n    private CheckersController gameLogic;\r\n\r\n    private static final int BOARD_SIZE = 8;\r\n    private StackPane[][] tileBorderGrid = new StackPane[BOARD_SIZE][BOARD_SIZE];\r\n    private ImageView[][] tilePiece = new ImageView[BOARD_SIZE][BOARD_SIZE];\r\n\r\n    // pieces\r\n    private Image blueChecker;\r\n    private Image pinkChecker;\r\n    private Image blueKingChecker;\r\n    private Image pinkKingChecker;\r\n\r\n    // Turn images\r\n    private Image yourTurn;\r\n    private Image opponentTurn;\r\n\r\n    private Image winnerBlue;\r\n    private Image winnerPink;\r\n    //private Image tie;\r\n\r\n    private StackPane previouslySelectedTile = null;\r\n    private int lastClickedRow = -1;\r\n    private int lastClickedCol = -1;\r\n\r\n    /**\r\n    Initializes the GUI board\r\n     */\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        // relative addresses\r\n        gameLogic = new CheckersController();\r\n        blueChecker = new Image(\"checkers_blue_piece.png\");\r\n        pinkChecker = new Image(\"checkers_pink_piece.png\");\r\n        blueKingChecker = new Image(\"checkers_blue_king_piece.png\");\r\n        pinkKingChecker = new Image(\"checkers_pink_king_piece.png\");\r\n        yourTurn = new Image(\"checkers_pink_piece.png\");\r\n        opponentTurn = new Image(\"checkers_blue_piece.png\");\r\n        winnerBlue = new Image(\"YOU_WIN_blue.png\");\r\n        winnerPink = new Image(\"YOU_WIN_pink.png\");\r\n        //tie = new Image(\"TIE.png\");\r\n\r\n\r\n        for (int i = 0; i < BOARD_SIZE; i++) {\r\n            for (int j = 0; j < BOARD_SIZE; j++) {\r\n                // Create the tile (StackPane)\r\n                tileBorderGrid[i][j] = new StackPane();\r\n                tilePiece[i][j] = new ImageView();\r\n                tilePiece[i][j].setFitWidth(30);\r\n                tilePiece[i][j].setFitHeight(30);\r\n                tilePiece[i][j].setPreserveRatio(true);\r\n                tilePiece[i][j].setMouseTransparent(true);\r\n\r\n                StackPane border = tileBorderGrid[i][j];\r\n\r\n                final int row = i;\r\n                final int col = j;\r\n\r\n                border.setOnMouseEntered(event -> {\r\n                    String currentStyle = border.getStyle();\r\n                    if (!currentStyle.contains(\"#78956f\") && !currentStyle.contains(\"#215b85\")\r\n                            && !currentStyle.contains(\"#81509f\") && !currentStyle.contains(\"#892d37\") &&\r\n                            !currentStyle.contains(\"#e1c50e\")) {\r\n                        border.setStyle(\"-fx-border-color: lightgray; -fx-border-width: 3;\");\r\n                    }\r\n                });\r\n\r\n                border.setOnMouseExited(event -> {\r\n                    String currentStyle = border.getStyle();\r\n                    if (currentStyle.contains(\"lightgray\")) {\r\n                        border.setStyle(\"-fx-border-color: transparent;\");\r\n                    }\r\n                });\r\n\r\n                //selected piece highlight\r\n                border.setOnMouseClicked(event -> {\r\n\r\n                    if (previouslySelectedTile != null) {\r\n                        previouslySelectedTile.setStyle(\"-fx-border-color: transparent;\");\r\n                    }\r\n\r\n\r\n                    border.setStyle(\"-fx-border-color: #e1c50e; -fx-border-width: 5;\");\r\n                    previouslySelectedTile = border;\r\n\r\n                    sendMouseInput(row, col);\r\n                });\r\n\r\n                tileBorderGrid[i][j].getChildren().add(tilePiece[i][j]);\r\n                checkerBoard.add(tileBorderGrid[i][j], j, i);\r\n            }\r\n        }\r\n        // update the board and turns\r\n        refreshBoard();\r\n        getTurn();\r\n    }\r\n\r\n    /**\r\n     * Sends mouse click input to game logic and refreshes the board\r\n     * @param row of the clicked piece\r\n     * @param col of the clicked piece\r\n     */\r\n\r\n    private void sendMouseInput(int row, int col) {\r\n        lastClickedRow = row;\r\n        lastClickedCol = col;\r\n\r\n        Ivec2 tileClicked = new Ivec2(col, row);\r\n\r\n        gameLogic.receiveInput(tileClicked);\r\n\r\n        refreshBoard();\r\n        getTurn();\r\n        checkWinners();\r\n    }\r\n\r\n    /**\r\n    Sets the screen to show which players turn it is\r\n     */\r\n\r\n    private void getTurn() {\r\n        int currentPlayer = gameLogic.getCurrentPlayer();\r\n        int winner [] = gameLogic.getWinner();\r\n\r\n        // Check if the game is ongoing before checking the turns\r\n        if (winner.length == 0) {\r\n            // Check turns\r\n            if (currentPlayer == 0) {\r\n                screen.setImage(yourTurn);\r\n            }\r\n            else {\r\n                screen.setImage(opponentTurn);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Gets the board cells and updates the pieces and highlights on the board based on that\r\n     */\r\n\r\n    private void refreshBoard() {\r\n        int[][] pieceBoard = gameLogic.getBoardCells(0b1).getFirst();\r\n        int[][] highlightBoard = gameLogic.getBoardCells(0b10).getFirst();\r\n        // itterate through the board and update one by one\r\n        for (int i = 0; i < BOARD_SIZE; i++) {\r\n            for (int j = 0; j < BOARD_SIZE; j++) {\r\n                switch (pieceBoard[i][j]) {\r\n                    case 1 -> tilePiece[i][j].setImage(pinkChecker);\r\n                    case 2 -> tilePiece[i][j].setImage(pinkKingChecker);\r\n                    case 3 -> tilePiece[i][j].setImage(blueChecker);\r\n                    case 4 -> tilePiece[i][j].setImage(blueKingChecker);\r\n                    default -> tilePiece[i][j].setImage(null);\r\n\r\n                }\r\n                String highlightStyle = switch (highlightBoard[i][j]) {\r\n                    case 1 -> \"-fx-border-color: #78956f; -fx-border-width: 4;\"; //selectable pieces\r\n                    case 3 -> \"-fx-border-color: #81509f; -fx-border-width: 4;\"; //valid move\r\n                    case 4 -> \"-fx-border-color: #892d37; -fx-border-width: 4;\"; //capture\r\n                    default -> \"-fx-border-color: transparent;\";\r\n                };\r\n                tileBorderGrid[i][j].setStyle(highlightStyle);\r\n            }\r\n        }\r\n        if (lastClickedRow >= 0 && lastClickedCol >= 0) {\r\n            tileBorderGrid[lastClickedRow][lastClickedCol].setStyle(\"-fx-border-color: #e1c50e; -fx-border-width: 4;\");\r\n        }\r\n        // Check if either player has won\r\n        checkWinners();\r\n    }\r\n\r\n    /**\r\n     * Displays win message using getWinner method from GL code\r\n     */\r\n    private void checkWinners() {\r\n        // used to determine who won\r\n        int [] winner = gameLogic.getWinner();\r\n\r\n        // array of length one means someone one\r\n        // TODO: send to networking\r\n        // TODO: add graphics for win/lose/tie messages\r\n        if (winner.length == 1) {\r\n            if (winner[0] == 0) {\r\n                screen.setImage(winnerPink);\r\n            } else {\r\n                screen.setImage(winnerBlue);\r\n            }\r\n        // array of length two means tie\r\n        } else if (winner.length == 2) {\r\n           // screen.setImage(tie);\r\n        }\r\n        // otherwise do nothing and keep playing\r\n    }\r\n}
===================================================================
diff --git a/src/client_main/java/GUI_client/CheckersGUIController.java b/src/client_main/java/GUI_client/CheckersGUIController.java
--- a/src/client_main/java/GUI_client/CheckersGUIController.java	(revision 7f6b413e6dd93f7fa299c4fd381bd621ad071f12)
+++ b/src/client_main/java/GUI_client/CheckersGUIController.java	(date 1743959764940)
@@ -39,7 +39,7 @@
 
     private Image winnerBlue;
     private Image winnerPink;
-    //private Image tie;
+    private Image tie;
 
     private StackPane previouslySelectedTile = null;
     private int lastClickedRow = -1;
@@ -61,7 +61,7 @@
         opponentTurn = new Image("checkers_blue_piece.png");
         winnerBlue = new Image("YOU_WIN_blue.png");
         winnerPink = new Image("YOU_WIN_pink.png");
-        //tie = new Image("TIE.png");
+        tie = new Image("tie.png");
 
 
         for (int i = 0; i < BOARD_SIZE; i++) {
@@ -211,7 +211,7 @@
             }
         // array of length two means tie
         } else if (winner.length == 2) {
-           // screen.setImage(tie);
+           screen.setImage(tie);
         }
         // otherwise do nothing and keep playing
     }
